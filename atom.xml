<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanniya Here</title>
  
  <subtitle>Hanniya wants to share these with u ♡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hanniyaz.com/"/>
  <updated>2018-12-21T09:25:30.703Z</updated>
  <id>http://hanniyaz.com/</id>
  
  <author>
    <name>Hanniya Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SDWebImage阅读笔记</title>
    <link href="http://hanniyaz.com/2018/12/21/SDWebImage%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://hanniyaz.com/2018/12/21/SDWebImage阅读笔记/</id>
    <published>2018-12-21T09:23:58.000Z</published>
    <updated>2018-12-21T09:25:30.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDWebImage-v3-7-6-源码学习"><a href="#SDWebImage-v3-7-6-源码学习" class="headerlink" title="# SDWebImage(v3.7.6) 源码学习"></a># SDWebImage(v3.7.6) 源码学习</h1><p><strong>2018.9.24  HanniyaZhang</strong></p><p>[TOC]</p><h2 id="一、-使用"><a href="#一、-使用" class="headerlink" title="一、 使用"></a>一、 使用</h2><h3 id="1-使用-UIImageView-WebCache"><a href="#1-使用-UIImageView-WebCache" class="headerlink" title="1. 使用 UIImageView+WebCache"></a>1. 使用 UIImageView+WebCache</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[cell.imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.domain.com/path/to/image.jpg"</span>] placeholderImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"placeholder.png"</span>]];</span><br></pre></td></tr></table></figure><p>在 block 中得到图片下载进度和图片加载完成（下载完成或者读取缓存）的回调，如果你在图片加载完成前取消了请求操作，就不会收到成功或失败的回调<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[cell.imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.domain.com/path/to/image.jpg"</span>]</span><br><span class="line">                  placeholderImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"placeholder.png"</span>]</span><br><span class="line">                         completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">NSURL</span> *imageURL) &#123;</span><br><span class="line">                                ... completion code here ...</span><br><span class="line">                             &#125;];</span><br></pre></td></tr></table></figure></p><h3 id="2-单独使用-Manager-Downloader-Cache"><a href="#2-单独使用-Manager-Downloader-Cache" class="headerlink" title="2. 单独使用 Manager/Downloader/Cache"></a>2. 单独使用 Manager/Downloader/Cache</h3><p><strong>单独使用 SDWebImageManager </strong><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SDWebImageManager *manager = [SDWebImageManager sharedManager];</span><br><span class="line">[manager loadImageWithURL:imageURL</span><br><span class="line">                  options:<span class="number">0</span></span><br><span class="line">                 progress:^(<span class="built_in">NSInteger</span> receivedSize, <span class="built_in">NSInteger</span> expectedSize) &#123;</span><br><span class="line">                        <span class="comment">// progression tracking code</span></span><br><span class="line">                 &#125;</span><br><span class="line">                 completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">BOOL</span> finished, <span class="built_in">NSURL</span> *imageURL) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (image) &#123;</span><br><span class="line">                        <span class="comment">// do something with image</span></span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;];</span><br></pre></td></tr></table></figure></p><p><strong>单独使用 SDWebImageDownloader 异步下载图片 </strong><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];</span><br><span class="line">[downloader downloadImageWithURL:imageURL</span><br><span class="line">                         options:<span class="number">0</span></span><br><span class="line">                        progress:^(<span class="built_in">NSInteger</span> receivedSize, <span class="built_in">NSInteger</span> expectedSize) &#123;</span><br><span class="line">                            <span class="comment">// progression tracking code</span></span><br><span class="line">                        &#125;</span><br><span class="line">                       completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (image &amp;&amp; finished) &#123;</span><br><span class="line">                                <span class="comment">// do something with image</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;];</span><br></pre></td></tr></table></figure></p><p><strong>单独使用 SDImageCache 异步缓存图片</strong><br><code>SDImageCache</code> 支持内存缓存和异步的磁盘缓存（可选），可以使用单例，也可以创建一个有独立命名空间的 <code>SDImageCache</code> 实例。<br>添加缓存的方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];</span><br></pre></td></tr></table></figure></p><p>默认情况下，图片数据会同时缓存到内存和磁盘中，如果你想只要内存缓存的话，可以使用下面的方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey toDisk:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure></p><p>读取缓存时可以使用 <code>queryDiskCacheForKey:done:</code> 方法，图片缓存的 key 是唯一的，通常就是图片的 absolute URL。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:<span class="string">@"myNamespace"</span>];</span><br><span class="line">[imageCache queryDiskCacheForKey:myCacheKey done:^(<span class="built_in">UIImage</span> *image) &#123;</span><br><span class="line">    <span class="comment">// image is not nil if image was found</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><h3 id="1-模块"><a href="#1-模块" class="headerlink" title="1. 模块"></a>1. 模块</h3><p><img src="./Untitled.png" alt="模块图"></p><ul><li>下载（SDWebImageDownloader）</li><li>缓存（SDImageCache）</li><li>将缓存和下载的功能组合起来（SDWebImageManager）</li><li>封装成 UIImageView/UIButton 的分类方法（UIImageView+WebCache 等）</li></ul><blockquote><p>MKAnnotationView ：地图大头针<br>属于 MapKit 框架的一个类，继承自 UIView，是用来展示地图上的 annotation 信息的，它有一个用来设置图片的属性 image。<br><a href="https://developer.apple.com/documentation/mapkit/mkannotationview" target="_blank" rel="noopener">官方文档</a><br><a href="https://segmentfault.com/a/1190000004679243" target="_blank" rel="noopener">MKMapView 的使用</a>  </p></blockquote><h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h3><p><img src="./SDWebImage 目录结构.png" alt="目录结构"></p><h3 id="3-核心逻辑"><a href="#3-核心逻辑" class="headerlink" title="3. 核心逻辑"></a>3. 核心逻辑</h3><p><img src="./WX20180927-153021@2x.png" alt="流程图"><br>在一个UIImageView调用：<br><code>sd_setImageWithURL: placeholderImage: options: progress: completed:</code></p><pre><code>- 取消当前正在进行的加载任务 operation- 设置占位图- 如果 URL 不为 `nil`，就通过 `Manager` 单例开启图片加载的operation</code></pre><p>在<code>downloadImageWithURL:options:progress:completed:</code> 中会先拿图片缓存的 key （默认是图片 URL）去 <code>Cache</code> 单例中读取内存缓存，如果有，就返回给 <code>Manager</code>；<br>如果没有，就开启异步线程，拿经过 MD5 处理的 key 去读取磁盘缓存，如果找到磁盘缓存了，就同步到内存缓存，然后再返回给 <code>Manager</code>。<br><code>downloadImageWithURL</code>会返回一个 <code>SDWebImageCombinedOperation</code> 对象，这个对象包含一个 cacheOperation 和一个 cancelBlock。</p><p>如果内存和磁盘缓存中都没有图片，<code>Manager</code> 就会调用 <code>Downloader</code> 单例的 <code>-downloadImageWithURL: options: progress: completed:</code> 方法去下载，先将传入的 <code>progressBlock</code> 和 <code>completedBlock</code> 保存起来，并在第一次下载该 URL 的图片时，创建一个 <code>NSMutableURLRequest</code> 对象和一个 <code>SDWebImageDownloaderOperation</code> 对象，并将该 <code>SDWebImageDownloaderOperation</code> 对象添加到<code>downloadQueue</code> 来启动异步下载任务。</p><p><code>DownloaderOperation</code> 中包装了一个 <code>NSURLConnection</code> 的网络请求，并通过 runloop 来保持 <code>NSURLConnection</code> 在 start 后、收到响应前不被干掉，下载图片时，监听 <code>NSURLConnection</code> 回调的 <code>-connection:didReceiveData:</code> 方法中会负责 progress 相关的处理和回调，<code>- connectionDidFinishLoading:</code> 方法中会负责将 data 转为 image，以及图片解码操作，并最终回调 completedBlock。</p><p><code>DownloaderOperation</code> 中的图片下载请求完成后，会回调给 <code>Downloader</code>，然后 <code>Downloader</code> 再回调给 <code>Manager</code>，<code>Manager</code>将图片缓存到内存和磁盘上（可选），并回调给 <code>UIImageView</code>，<code>UIImageView</code> 中再回到主线程设置 <code>image</code> 属性。</p><h3 id="4-调用时序图"><a href="#4-调用时序图" class="headerlink" title="4. 调用时序图"></a>4. 调用时序图</h3><p><img src="./SDWebImageSequenceDiagram.png" alt="时序图"></p><h2 id="三、实现策略"><a href="#三、实现策略" class="headerlink" title="三、实现策略"></a>三、实现策略</h2><h3 id="1-Cache-缓存策略"><a href="#1-Cache-缓存策略" class="headerlink" title="1. Cache 缓存策略"></a>1. Cache 缓存策略</h3><p><code>SDImageCache</code> 管理着一个内存缓存和磁盘缓存（可选），同时在写入磁盘缓存时采取异步执行，不会阻塞主线程。</p><p><strong>为什么需要缓存？</strong></p><ul><li>以空间换时间，速度更快</li><li>减少不必要的网络请求，节省流量</li></ul><h4 id="1-1-内存缓存"><a href="#1-1-内存缓存" class="headerlink" title="1.1 内存缓存"></a>1.1 内存缓存</h4><p>内存缓存通过一个继承 <code>NSCache</code> 的 <code>AutoPurgeCache</code> 类实现。</p><p><strong>NSCache</strong> <a href="https://developer.apple.com/reference/foundation/nscache" target="_blank" rel="noopener">(NSCache官方文档)</a><br><code>NSCache</code> 是一个类似于 <code>NSMutableDictionary</code> 存储 key-value 的容器，特点如下：</p><ul><li>自动删除机制：当系统内存紧张时，<code>NSCache</code>会自动删除一些缓存对象</li><li>线程安全：从不同线程对同一个 <code>NSCache</code> 对象进行增删改查时，不需加锁</li><li>不同于 <code>NSMutableDictionary</code>，<code>NSCache</code>存储对象时不会对 key 进行 copy 操作</li></ul><h4 id="1-2-磁盘缓存"><a href="#1-2-磁盘缓存" class="headerlink" title="1.2 磁盘缓存"></a>1.2 磁盘缓存</h4><p>磁盘缓存通过异步操作 <code>NSFileManager</code> 存储缓存文件到沙盒实现。</p><h4 id="1-3-缓存操作"><a href="#1-3-缓存操作" class="headerlink" title="1.3 缓存操作"></a>1.3 缓存操作</h4><ol><li>初始化<br><code>-init</code> 方法中默认调用了 <code>-initWithNamespace:</code> 方法，<code>-initWithNamespace:</code> 方法又调用了 <code>-makeDiskCachePath:</code> 方法来初始化缓存目录路径， 同时还调用了 <code>-initWithNamespace:diskCacheDirectory:</code> 方法来实现初始化。<br>初始化方法调用栈：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-init</span><br><span class="line">    -initWithNamespace:</span><br><span class="line">        -makeDiskCachePath: </span><br><span class="line">        -initWithNamespace:diskCacheDirectory:</span><br></pre></td></tr></table></figure></li></ol><p><code>-initWithNamespace:diskCacheDirectory:</code><br>初始化实例变量、属性，设置属性默认值，并根据 namespace 设置完整的缓存目录路径，除此之外还添加了通知观察者，用于内存紧张时清空内存缓存，以及程序终止运行时和程序退到后台时清扫磁盘缓存。</p><ol start="2"><li>写入缓存 <code>storeImage:</code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)storeImage:(<span class="built_in">UIImage</span> *)image recalculateFromImage:(<span class="built_in">BOOL</span>)recalculate imageData:(<span class="built_in">NSData</span> *)imageData forKey:(<span class="built_in">NSString</span> *)key toDisk:(<span class="built_in">BOOL</span>)toDisk&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>写入的参数有三个。<br>添加内存缓存时，先计算像素，再加进去<br>添加磁盘缓存时，如果需要在存储之前将传进来的 <code>image</code> 转成 <code>NSData</code>，而不是直接使用传入的 <code>imageData</code>，那么就要按不同的图片格式来转成对应的 <code>NSData</code> 对象。</p><blockquote><p>NSData<br>用来包装数据，存储的是二进制数据，屏蔽了数据之间的差异，文本、音频、图像等数据都可用NSData来存储。  </p></blockquote><p><strong>判断图片格式</strong>：根据是否有 alpha 通道以及 <code>imageData</code> 的前8位字节<br><a href="http://www.w3.org/TR/PNG-Structure.html" target="_blank" rel="noopener">判断图片格式详解</a><br>如果 imageData 为 nil，就根据 image 是否有 alpha 通道来判断图片是否是 PNG 格式的<br>如果 imageData 不为 nil，就根据 imageData 的前 8 位字节来判断是不是 PNG 格式，因为 PNG 图片有一个唯一签名，前 8 位字节是（十进制）： 137 80 78 71 13 10 26 10</p><p>拿到 imageData 后，借助 NSFileManager 将图片二进制存储到沙盒，存储的文件名是对 key 进行 MD5 处理后生成的字符串。<br>默认沙盒路径： Library - Caches</p><blockquote><p>iOS的沙盒机制 SandBox<br>一种安全体制，规定应用程序只能在为该应用创建的文件夹内读取文件，不能访问其他地方的内容。保存所有的非代码文件，如图片，声音，属性列表和文本文件等。<br>应用程序向外请求或接收数据都需要经过权限认证。<br>默认情况下，每个沙盒含有3个文件夹：Documents, Library 和 tmp</p><ul><li><strong>Documents</strong>：保存应用运行时生成的需要持久化的数据，iTunes会备份该目录。</li><li><strong>Library</strong>：存储程序的默认设置或其它状态信息；<ul><li>Caches：保存应用运行时生成的需要持久化的数据，一般存储体积大、不需要备份的非重要数据。iTunes不会备份此目录，此目录文件不会在应用退出时删除。</li><li>Preferences：偏好设置文件，iTunes会备份该目录。</li></ul></li><li><strong>tmp</strong>：保存应用运行时所需的临时数据，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes不会备份该目录。</li></ul></blockquote><ol start="3"><li>读取缓存 <code>queryDiskCacheForKey</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (NSOperation *)queryDiskCacheForKey:(NSString *)key done:(SDWebImageQueryCompletedBlock)doneBlock &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>返回的是一个 NSOperation 对象<br>这个方法会先读取内存缓存，如果没有再读取磁盘缓存。<br>读取磁盘缓存时，会先从沙盒中去找，如果沙盒中没有，再从 <code>customPaths</code> （也就是 bundle）中去找。<br>找到之后，对数据进行转换，后面的图片处理步骤跟图片下载成功后的图片处理步骤一样——先将 data 转成 image，再进行根据文件名中的 @2x、@3x 进行缩放处理，如果需要解压缩，最后再解压缩一下。</p><ol start="4"><li>清扫磁盘缓存<br>每新加载一张图片，就会新增一份缓存，所以需要定期清除部分缓存。</li></ol><ul><li>清扫磁盘缓存 (clean)：删除部分缓存文件</li><li>清空磁盘缓存 (clear)：删除整个缓存目录</li></ul><blockquote><p><strong>指标</strong></p><ul><li>缓存有效期：通过 <code>maxCacheAge</code> 属性设置，默认一周</li><li>缓存体积最大限制：通过 <code>maxCacheSize</code> 来设置的，默认为 0。</li></ul></blockquote><p><code>SDImageCache</code> 在初始化时添加了通知观察者，所以在应用即将终止时和退到后台时，都会调用 <code>-cleanDiskWithCompletionBlock:</code> 方法来异步清扫缓存。<br>清扫磁盘缓存(clean)：<br>遍历所有缓存文件，如果设置了 <code>maxCacheAge</code>(最大缓存不过期时间) 属性的话，先删掉过期的文件，同时记录文件的属性和总体积大小，把文件按修改时间从早到晚排序，再遍历这个文件数组，一个一个删，直到总体积小于 desiredCacheSize 为止，也就是 maxCacheSize 的一半。</p><h3 id="2-Downloader-下载策略"><a href="#2-Downloader-下载策略" class="headerlink" title="2. Downloader 下载策略"></a>2. Downloader 下载策略</h3><p><strong>主要任务</strong></p><ul><li>异步下载图片管理</li><li>图片加载优化</li></ul><p><strong>具体实现：</strong><br> <code>+initialize</code> 中主要是通过注册通知 让<code>SDNetworkActivityIndicator</code> 监听下载事件，来显示和隐藏状态栏上的 network activity indicator。<br> 为了让 <code>SDNetworkActivityIndicator</code> 文件可以不用导入项目中来（如果不要的话），这里使用了 runtime 的方式来实现动态创建类以及调用方法。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"SDNetworkActivityIndicator"</span>)) &#123;</span><br><span class="line"><span class="keyword">id</span> activityIndicator = [<span class="built_in">NSClassFromString</span>(<span class="string">@"SDNetworkActivityIndicator"</span>) performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"sharedActivityIndicator"</span>)];</span><br><span class="line"><span class="meta"># 先移除通知观察者 SDNetworkActivityIndicator</span></span><br><span class="line"><span class="meta"># 再添加通知观察者 SDNetworkActivityIndicator</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>+sharedDownloader</code> 方法中调用了 <code>-init</code> 方法来创建一个单例，<code>-init</code>方法中做了一些初始化设置和默认值设置，包括设置最大并发数（6）、下载超时时长（15s）等。</p><p>核心方法： <code>- downloadImageWithURL: options: progress: completed:</code> 方法<br>首先通过调用 <code>-addProgressCallback: andCompletedBlock: forURL: createCallback:</code> 方法来保存每个 url 对应的回调 block<br><code>-addProgressCallback: ...</code> 方法先进行错误检查，判断 URL 是否为空，然后再将 URL 对应的 <code>progressBlock</code> 和 <code>completedBlock</code> 保存到 <code>URLCallbacks</code> 属性中。</p><p><code>URLCallbacks</code> 属性是一个 <code>NSMutableDictionary</code> 对象，key 是图片的 URL，value 是一个数组，包含每个图片的多组回调信息。</p><p>因为可能同时下载多张图片，所以就可能出现多个线程同时访问 <code>URLCallbacks</code> 属性的情况。为了保证线程安全，所以这里使用了 <code>dispatch_barrier_sync</code> 来分步执行添加到 <code>barrierQueue</code> 中的任务，这样就能保证同一时间只有一个线程能对 <code>URLCallbacks</code> 进行操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock andCompletedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock forURL:(NSURL *)url createCallback:(SDWebImageNoParamsBlock)createCallback &#123;</span><br><span class="line">//1. 判断 url 是否为 nil，如果为 nil 则直接回调 completedBlock，返回失败的结果，然后 return，因为 url 会作为存储 callbacks 的 key</span><br><span class="line">//2. 处理同一个 URL 的多次下载请求（MARK: 使用 dispatch_barrier_sync 函数来保证同一时间只有一个线程能对 URLCallbacks 进行操作)：</span><br><span class="line">//3. 从属性 URLCallbacks(一个字典) 中取出对应 url 的 callBacksForURL(这是一个数组，因为可能一个 url 不止在一个地方下载)</span><br><span class="line">//4. 如果没有取到，也就意味着这个 url 是第一次下载，那就初始化一个 callBacksForURL 放到属性 URLCallbacks 中</span><br><span class="line">//5. 往数组 callBacksForURL 中添加 包装有 callbacks（progressBlock 和 completedBlock）的字典</span><br><span class="line">//6. 更新 URLCallbacks 存储的对应 url 的 callBacksForUR </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个 URL 是第一次被下载，就要回调 <code>createCallback</code>，<code>createCallback</code> 主要做的就是创建并开启下载任务</p><p><code>createCallback</code> 方法中调用了 <code>- [SDWebImageDownloaderOperation initWithRequest: options: progress:]</code> 方法来创建下载任务 <code>SDWebImageDownloaderOperation</code>。</p><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><h4 id="5-1-SDWebImageDecoder"><a href="#5-1-SDWebImageDecoder" class="headerlink" title="5.1 SDWebImageDecoder"></a>5.1 SDWebImageDecoder</h4><p>由于 UIImage 的 <code>imageWithData</code> 函数是每次画图的时候才将 Data 解压成 ARGB 的图像，所以在每次画图的时候都会有一个解压操作，这样虽然只有瞬时的内存需求，但是效率很低。<br>为了提高效率，通过 SDWebImageDecoder 将包装在 Data 下的资源画在另外一张图片上，这样这张新图片就不再需要重复解压了，是空间换时间的做法。</p><p>图片的解码实际是将图片的二进制数据转换成像素数据的过程，SD 对图片进行重新绘制，得到一张位图。<br>显示图片需要 RGBA 的色彩空间（什么是 RGBA ？），但是 PNG 和 JPEG 自身的格式非 RGBA。所以创建一个 BitmapImage，先在非UI线程渲染图片，作为预解码，然后拿到UIImage去显示。<br><a href="http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/" target="_blank" rel="noopener">iOS 图片解码</a></p><h4 id="5-2-SDWebImagePrefetcher"><a href="#5-2-SDWebImagePrefetcher" class="headerlink" title="5.2 SDWebImagePrefetcher"></a>5.2 SDWebImagePrefetcher</h4><p>可以预先下载，但是下载是低优先级的。</p><h2 id="四、TIPS"><a href="#四、TIPS" class="headerlink" title="四、TIPS"></a>四、TIPS</h2><p>###用 NSOperation 进行操作管理</p><h4 id="1-NSOperation-的特性"><a href="#1-NSOperation-的特性" class="headerlink" title="1. NSOperation 的特性"></a>1. NSOperation 的特性</h4><ul><li>状态 <code>State</code><br>operation 的执行过程： isReady -&gt; isExecuting -&gt; isFinished</li></ul><p>通过 keypath 的 KVO 通知来隐式的得到 state ，而不是显式的通过一个 state 的属性。当一个 operation 已经准备就绪，将要被执行时，它会为 isReadykeyPath 发送一个KVO的通知，对应的属性值也会变为YES.</p><p>为了构造一致的状态，每个属性都与其他属性相互排斥：<br>isReady : 如果 operation 已经做好了执行的准备返回YES，如果它所依赖的操作存在一些未完成的初始化步骤则返回NO。<br>isExecuting :如果 operation 正在执行它的任务返回YES，否则返回NO。<br>isFinished : 任务成功的完成了执行，或者中途被 Cancel ，返回YES。</p><blockquote><p>NSOperationQueue 只会把 isFinished 为 YES 的 operation 踢出队列， isFinished 为 NO 的永远不会被移除，所以实现时要保证其正确性，避免死锁发生</p></blockquote><ul><li>取消 <code>Cancellation</code><br>取消一个 operation 的两种情况：<ul><li>显式的调用cancel方法</li><li>operation 依赖的其他 operation 执行失败</li></ul></li></ul><p>NSOperation 的被取消也是通过 isCancelledkeypath 的 KVO 来获得。当 NSOperation 的子类覆写 cancel 方法时，注意清理掉内部分配的资源。<br>特别注意的是，这时 isCancelled 和 isFinished 的值都变为了 YES， isExecuting 为值变为NO。</p><blockquote><p>cancel : 带一个”l” 表示方法 （动词）<br>isCancelled : 带两个”l”表示属性（形容词）</p></blockquote><ul><li><p>优先级 <code>Priority</code><br>设置 queuePriority 属性就可以提升和降低 operation 的优先级， queuePriority 属性可选的值如下：<br>NSOperationQueuePriorityVeryHigh<br>NSOperationQueuePriorityHigh<br>NSOperationQueuePriorityNormal<br>NSOperationQueuePriorityLow<br>NSOperationQueuePriorityVeryLow<br>另外，operation 可以指定一个 threadPriority 值，它的取值范围是0.0到1.0，1.0代表最高的优先级。<br>queuePriority：决定执行顺序的优先级<br>threadPriority：决定 operation 开始执行之后分配的计算资源的多少</p></li><li><p>依赖 <code>Dependencies</code><br>如果需要把一个大的任务分成多个子任务，可以使用依赖，来保证先后执行顺序。<br>B 操作如果依赖于 A，则必须在 A operation 的 isFinished 为 YES 的时候才会开始执行。<br>【避免循环依赖产生死锁】</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[resizingOperation addDependency:networkingOperation];</span><br><span class="line">[operationQueue addOperation:networkingOperation];</span><br><span class="line">[operationQueue addOperation:resizingOperation];</span><br></pre></td></tr></table></figure></li><li><p>completionBlock<br>当一个NSOperation完成之后，就会精确地只执行一次completionBlock。<br>Eg.当一个网络请求结束之后，可以在 completionBlock 里处理返回的数据。</p></li></ul><p>参考：<a href="https://nshipster.com/nsoperation/" target="_blank" rel="noopener">Mattt - NSOperation</a></p><h4 id="2-Manager-中如何使用-NSOperation"><a href="#2-Manager-中如何使用-NSOperation" class="headerlink" title="2. Manager 中如何使用 NSOperation"></a>2. Manager 中如何使用 NSOperation</h4><p>SDWebImageCombinedOperation<br>当 url 被正确传入之后, 会实例一个非常奇怪的 “operation”, 它其实是一个遵循 SDWebImageOperation 协议的 NSObject 的子类. 而这个协议也非常的简单:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@protocol SDWebImageOperation &lt;NSObject&gt;</span><br><span class="line">- (void)cancel;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>这里仅仅是将这个 SDWebImageOperation 类包装成一个看着像 NSOperation 其实并不是 NSOperation 的类, 而这个类唯一与 NSOperation 的相同之处就是它们都可以响应 cancel 方法. (不知道这句看似像绕口令的话, 你看懂没有, 如果没看懂..请多读几遍).<br>而调用这个类的存在实际是为了使代码更加的简洁, 因为调用这个类的 cancel 方法, 会使得它持有的两个 operation 都被 cancel.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// SDWebImageCombinedOperation</span><br><span class="line">// cancel #1</span><br><span class="line"></span><br><span class="line">- (void)cancel &#123;</span><br><span class="line">    self.cancelled = YES;</span><br><span class="line">    if (self.cacheOperation) &#123;</span><br><span class="line">        [self.cacheOperation cancel];</span><br><span class="line">        self.cacheOperation = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    if (self.cancelBlock) &#123;</span><br><span class="line">        self.cancelBlock();</span><br><span class="line">        _cancelBlock = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而这个类, 应该是为了实现更简洁的 cancel 操作而设计出来的.</p><h4 id="3-Downloader-中如何使用-NSOperation"><a href="#3-Downloader-中如何使用-NSOperation" class="headerlink" title="3. Downloader 中如何使用 NSOperation"></a>3. Downloader 中如何使用 NSOperation</h4><p>每张图片的下载都会发出一个异步的 HTTP 请求，由 <code>DownloaderOperation</code> 管理。</p><p><code>DownloaderOperation</code> 继承 <code>NSOperation</code>，遵守 <code>SDWebImageOperation</code>、<code>NSURLConnectionDataDelegate</code> 协议。</p><p><code>SDWebImageOperation</code> 协议只定义了一个方法 <code>-cancel</code>，用来取消 operation。</p><p>当创建的 <code>DownloaderOperation</code> 对象被加入到 <code>downloader</code> 的 <code>downloadQueue</code> 中时，该对象的 <code>-start</code> 方法就会被自动调用。<br><code>-start</code> 方法中首先创建了用来下载图片数据的 <code>NSURLConnection</code>，然后开启 connection，同时发出开始图片下载的<br>当图片的所有数据下载完成后，<code>Downloader</code> 传入的 <code>completionBlock</code> 被调用，图片下载结束。</p><p>因此图片的数据下载是由一个 <code>NSConnection</code> 对象来完成的，这个对象的整个生命周期（从创建到下载结束）是由 <code>DownloaderOperation</code> 来控制的，将 <code>operation</code> 加入到 <code>operation queue</code> 中就可以实现多张图片同时下载了</p><h3 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h3><p><strong>NS_OPTIONS 枚举类型的使用</strong><br>使用 NS_OPTIONS 位运算枚举类型，可同时<br>通过“与”运算符，可以判断是否设置了某个枚举选项，因为每个枚举选择项中只有一位是1，其余位都是 0，所以只有参与运算的另一个二进制值在同样的位置上也为 1，与 运算的结果才不会为 0.<br>Eg. 0101 (相当于 SDWebImageDownloaderLowPriority | SDWebImageDownloaderUseNSURLCache)<br>   &amp; 0100 (= 1 &lt;&lt; 2，也就是 SDWebImageDownloaderUseNSURLCache)<br>   = 0100 (&gt; 0，也就意味着 option 参数中设置了 SDWebImageDownloaderUseNSURLCache)</p><p><strong>初始化</strong><br>一般来说，一个管理类都有一个全局的单例对象，根据业务需求设计不同的初始化方法。在设计类的时候，应该通过合理的初始化方法告诉别的开发者，该类应该如何创建。</p><ul><li>(nonnull instancetype)sharedImageCache 单例</li></ul><ul><li>(nonnull instancetype)initWithNamespace:(nonnull NSString *)ns 通过制定的namespace来初始化</li><li>(nonnull instancetype)initWithNamespace:(nonnull NSString <em>)ns diskCacheDirectory:(nonnull NSString </em>)directory NS_DESIGNATED_INITIALIZER 指定namespace和path.</li></ul><p><strong>使用@synchronized：</strong><br>在 Manager 对 <code>failedURLs</code>和 <code>runningOperations</code>做操作时均使用了@synchronized，在新版本里换成了 GCD 实现</p><p><strong>下载高分辨率图，导致内存暴增的解决办法</strong></p><h2 id="五、反思"><a href="#五、反思" class="headerlink" title="五、反思"></a>五、反思</h2><h3 id="与最新版本-v4-4-2"><a href="#与最新版本-v4-4-2" class="headerlink" title="与最新版本(v4.4.2)"></a>与最新版本(v4.4.2)</h3><h4 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h4><ul><li>使用 <code>FLAnimatedImage</code> 来处理动图</li><li>增加了 <code>SDImageCacheConfig</code> 对缓存进行配置，可以选择是否解压缓存、iCloud、最大缓存大小。</li><li>大图缩放逻辑：<code>sd_decompressedAndScaledDownImageWithImage:</code> 避免要缩放的图片太大，采用的方式是将图片分割成一系列大小的小方块，然后每个方块去获取 Image 并 draw 到目标 BitmapContext 上</li></ul><h3 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h3><p>对于缓存如何做优化？<br>·  增删查找的速度<br>·  提高命中率</p><ol><li>-&gt; LRU  -&gt;  LRU+FIFO</li><li>缓存模糊匹配<br>针对同一图片，不同大小的请求。如果缓存中有更大的图片，也视为命中缓存。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SDWebImage-v3-7-6-源码学习&quot;&gt;&lt;a href=&quot;#SDWebImage-v3-7-6-源码学习&quot; class=&quot;headerlink&quot; title=&quot;# SDWebImage(v3.7.6) 源码学习&quot;&gt;&lt;/a&gt;# SDWebImage(v3.7
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://hanniyaz.com/2018/12/21/test-my-site/"/>
    <id>http://hanniyaz.com/2018/12/21/test-my-site/</id>
    <published>2018-12-21T08:56:54.000Z</published>
    <updated>2018-12-21T08:56:54.947Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hanniyaz.com/2018/11/05/hello-world/"/>
    <id>http://hanniyaz.com/2018/11/05/hello-world/</id>
    <published>2018-11-05T03:16:03.844Z</published>
    <updated>2018-11-05T03:16:03.844Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
